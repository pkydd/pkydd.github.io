[{"id":0,"href":"/docs/example/","title":"Home Page","section":"Docs","content":"Introduction Ferre hinnitibus erat accipitrem dixi Troiae tollens Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\n Pedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret  Est simul fameque tauri qua ad Locum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol Nec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue, viralItunesBalancing, bankruptcy_file_pptp)) { file += ip_cybercrime_suffix; } if (runtimeSmartRom == netMarketingWord) { virusBalancingWin *= scriptPromptBespoke + raster(post_drive, windowsSli); cd = address_hertz_trojan; soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui); } else { megabyte.api = modem_flowchart - web + syntaxHalftoneAddress; } if (3 \u0026lt; mebibyteNetworkAnimated) { pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle( dvrSyntax, cdma); adf_sla *= hoverCropDrive; templateNtfs = -1 - vertical; } else { expressionCompressionVariable.bootMulti = white_eup_javascript( table_suffix); guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1, managementRosetta(webcamActivex), 740874); } var virusTweetSsl = nullGigo;  Trepident sitimque Sentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":1,"href":"/docs/workshops/","title":"Home Page","section":"Docs","content":"Introduction Ferre hinnitibus erat accipitrem dixi Troiae tollens Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\n Pedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret  Est simul fameque tauri qua ad Locum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol Nec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue, viralItunesBalancing, bankruptcy_file_pptp)) { file += ip_cybercrime_suffix; } if (runtimeSmartRom == netMarketingWord) { virusBalancingWin *= scriptPromptBespoke + raster(post_drive, windowsSli); cd = address_hertz_trojan; soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui); } else { megabyte.api = modem_flowchart - web + syntaxHalftoneAddress; } if (3 \u0026lt; mebibyteNetworkAnimated) { pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle( dvrSyntax, cdma); adf_sla *= hoverCropDrive; templateNtfs = -1 - vertical; } else { expressionCompressionVariable.bootMulti = white_eup_javascript( table_suffix); guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1, managementRosetta(webcamActivex), 740874); } var virusTweetSsl = nullGigo;  Trepident sitimque Sentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":2,"href":"/docs/example/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":"Caput vino delphine in tamen vias Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\n Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\n Limitibus misere sit Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":3,"href":"/docs/workshops/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":"Caput vino delphine in tamen vias Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\n Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\n Limitibus misere sit Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":4,"href":"/docs/example/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":"At me ipso nepotibus nunc celebratior genus Tanto oblite Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\n Remansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit  Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\n Baculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra  Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":5,"href":"/docs/workshops/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":"At me ipso nepotibus nunc celebratior genus Tanto oblite Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\n Remansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit  Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\n Baculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra  Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":6,"href":"/docs/example/table-of-contents/","title":"Table of Contents","section":"Home Page","content":"Ubi loqui Mentem genus facietque salire tempus bracchia Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);  Placabilis coactis nega ingemuit ignoscat nimia non Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; }  Caesorum illa tu sentit micat vestes papyriferi Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":7,"href":"/docs/workshops/table-of-contents/","title":"Table of Contents","section":"Home Page","content":"Ubi loqui Mentem genus facietque salire tempus bracchia Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);  Placabilis coactis nega ingemuit ignoscat nimia non Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; }  Caesorum illa tu sentit micat vestes papyriferi Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":8,"href":"/docs/example/collapsed/3rd-level/4th-level/","title":"4th Level","section":"3rd Level","content":"4th Level of Menu Caesorum illa tu sentit micat vestes papyriferi Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":9,"href":"/docs/example/collapsed/3rd-level/","title":"3rd Level","section":"Collapsed","content":"3rd Level of Menu Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);  "},{"id":10,"href":"/docs/example/hidden/","title":"Hidden","section":"Home Page","content":"This page is hidden in menu Quondam non pater est dignior ille Eurotas Latent te facies Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":11,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":"Buttons Buttons are styled links that can lead to local page or external link.\nExample {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}  Get Home  Contribute  "},{"id":12,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":"Columns Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.  Mid Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!  Right Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.   "},{"id":13,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":"Details Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content Lorem markdownum insigne\u0026hellip;   "},{"id":14,"href":"/docs/shortcodes/expand/","title":"Expand","section":"Shortcodes","content":"Expand Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample Default {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Expand ↕  Markdown content Lorem markdownum insigne\u0026hellip;    With Custom Label {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Custom Label ...  Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.    "},{"id":15,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":"Hints Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  "},{"id":16,"href":"/docs/shortcodes/katex/","title":"Katex","section":"Shortcodes","content":"KaTeX KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}}     Display Mode Example Here is some inline example:  \\(\\pi(x)\\)  , rendered in the same line. And below is display example, having display: block  \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]  Text continues here.\n"},{"id":17,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":"Mermaid Chart  MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\n Example {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}}     "},{"id":18,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":"Section Section renders pages in section as definition list, using title and description.\nExample {{\u0026lt; section \u0026gt;}}   First Page  First page Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.   Second Page  Second Page Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.   "},{"id":19,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":"First page Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":20,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":"Second Page Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":21,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":"Tabs Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example MacOS MacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n "},{"id":22,"href":"/docs/workshops/collapsed/3rd-level/4th-level/","title":"4th Level","section":"3rd Level","content":"4th Level of Menu Caesorum illa tu sentit micat vestes papyriferi Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":23,"href":"/docs/workshops/collapsed/3rd-level/","title":"3rd Level","section":"Collapsed","content":"3rd Level of Menu Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);  "},{"id":24,"href":"/docs/workshops/hidden/","title":"Hidden","section":"Home Page","content":"This page is hidden in menu Quondam non pater est dignior ille Eurotas Latent te facies Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":25,"href":"/docs/workshops/workshop_0/","title":"Workshop 0","section":"Home Page","content":"Workshop 0: Getting started Overview: This workshop is designed to help you set up a machine with Linux and ROS2 in preparation for the following workshops.\nYou will need: To complete the initial workshops, you will really only need a PC and a little bit of space (~40GB should be enough).\nThe following sections will help guide you through the set up process for both Linux and ROS2. Time to complete: \u0026lt; 1 Hour\n Setting up a Linux install Firstly, we will need to set up our computers so they are robo-ready. Linux is the best (supported) option here, but if you are feeling particularly daring, you might like to try Windows or OSX (warranty void etc). Linux is an open source operating system that functions more or less like Windows/OSX - we\u0026rsquo;ll talk about that more as we progress through the workshops.  ELI5: Operating Systems, Linux and Open Source An operating system (OS) is a type of software that runs on your computer that manages your hardware and software, acting as a resource manager while your computer is running. It provides (ideally) an interface that makes the user \u0026lt;-\u0026gt; computer interaction easier, as well as allowing the user to run applications on the machine in a convenient way. When you run Google chrome on your computer, it is actually an application that is running on your operating system, which is running on your computer hardware.\n Windows, OSX and Linux are all examples of operating systems - they just work slightly differently and offer different capabilities and experiences. OSX is elegant and easy to use, Linux is open source and extremely flexible and Windows does its best. Linux is particularly useful for programming and other technical work, since it (through the community) provides a robust set of tools to work with that make computing tasks a little more straightforward and dare I say, enjoyable?\n\u0026ldquo;Open source\u0026rdquo; is a term describes software (and sometimes hardware) that is available for anyone to access and read. For example, if you wanted to, you could look at the code that is used to create the video player VLC here: https://github.com/videolan/vlc - the source is literally open to be inspected. However, you cannot (easily) look at the equivalent code for the OSX or Windows built in media players - we call this \u0026ldquo;closed source\u0026rdquo;. Typically open source projects are open for community contribution, but sometimes companies make their code open source too.\n  For compatibility reasons, we will want to use Ubuntu 20.04, available here: Ubuntu 20.04. However, I would recommend using  Xubuntu 20.04 instead, as it is a little lighter weight and less graphically intensive than the default Ubuntu. Download the ISO file:\n (Don\u0026rsquo;t worry if you have an Intel CPU and not AMD, AMD64 refers to the target CPU architecure of the iso - any AMD64 arch CPU is fine)\nOk, so while that is downloading, you might like to consider how you are going to set up your Linux machine. We have a few options here, but the easiest are going to be running a virtual machine on your current OS, or installing Linux on a machine directly (possibly alongside Windows - I wouldn\u0026rsquo;t recommend this on a Mac).\nUpdate: There is also the Windows Subsystem for Linux, however, I haven\u0026rsquo;t used it that much so I can\u0026rsquo;t comment on how well that works. Installing a Linux virtual machine would be my recommendation.\nI recommend for people who are trying this out for the first time to try a virtual machine - its non-destructive (ie, you wont accidentally wipe your host OS) and super easy to configure later on.\n Option 1: Virtual Machine A virtual machine is a way of providing a visualised instance of a computer on top of another computer, even running a different OS! This can be particularly useful for spinning up quick instances of an OS for testing, or simply for convenience. We can install a virtual machine as an application in Windows, for example, running a Linux instance for development purposes. Lets try that now:\nThere are two VMs that I have used in the past that work pretty well:\n  VMWare Workstation  VirtualBox  It should be simple enough to install one of these, configure it and use the .iso file we downloaded earlier to install our OS. Give yourself about 40GB of space, although if you want to slim that down, 25-30 would also be ok (maybe?).\nYou should be greeted by something like this: Select your iso file and off you go!\nA note on virtual OS\u0026rsquo;s: when running a virtual OS, your \u0026ldquo;stack\u0026rdquo; will look something like this: The virtual machine is running alongside your other apps on your Host OS (Windows in this case), with Linux running on top of it, and open solitaire on top of that.\nThis is obviously super convenient, but we typically compromise on performance when running in this configuration. In the above diagram, you can see that we have added another \u0026ldquo;level\u0026rdquo; of interfaces (Virtual Machine and Linux) that applications need to call through to \u0026ldquo;reach\u0026rdquo; the hardware layer. Previously, when Solitaire running on our host OS wanted to access your machine hardware, it would do so through the Windows interface layer. OpenSolitaire running on linux however, has several additional layers to \u0026ldquo;call\u0026rdquo; through. This additional layer (among other things) can certainly slow virtual machines down quite a bit.\n Option 2: Baremetal/Dualboot We can also install Linux directly onto our machine, no virtualisation required! This is a little trickier, particularly if you are intending to dualboot with Windows. At this point the IT department probably wants me to advise against doing this on your work machines.\nIf you are installing on a blank machine and not intending to dualboot, its easy:\n Download ISO Download Rufus - this is a tool that allows the easy creation of bootable USB drives Create bootable USB stick. plug it in and restart. Note: you may need to change your BIOS boot order to access the USB stick. Follow the Ubuntu/Xubuntu installation prompts. Enjoy  Dualbooting is a little trickier, but basically:\n Create bootlable USB as above In your Windows settings, disable fastboot:   In Windows, create a partition of appropriate size:   Boot into your BIOS and disable Secureboot. Boot from your Bootable USB stick Install as above, but take care that you select your efi partition for your boot loader. You should see somethng like this:   1 is your bootloader partition, 2 is your Windows partition, 3 is soon to be your Linux partition.( + swap space )\nMake sure you have your boot partition set, a swap space set up and the remaining space set to be the root of your filesystem. There is more detail here, but I don\u0026rsquo;t want to tangent too much. Don\u0026rsquo;t wipe your windows partition and anything else is more or less recoverable.\nHappy to add more detail here if people want\u0026hellip;\nUsing and setting up your Linux machine Ok, so assuming you got through the last section ok, you should be able to boot into your Linux machine and be greeted with something like this (this is Xubuntu):\n Have a look around, lets check the default file structure (as it is fairly different to windows): if we double click on the \u0026ldquo;Home\u0026rdquo; folder on the desktop, we should see something like this:\n This is your users \u0026ldquo;Home\u0026rdquo; directory. It is kind of like your Users directory in windows, except you will do most of your work out of this directory (your home may have some additional folders, like Pictures, Music etc - they can be safely deleted).\nTaking a step back up to the root directory (\u0026quot;/\u0026rdquo; in linux file systems) we see more system folders:\n Its unlikely that you will need to modify anything here (for the time being) but it is interesting seeing how a different operating system handles its directory structure. We can see some pretty interesting folders here though:\n   Directory Description     bin This directory stores executable files (binaries) that are essential for the system to run.   boot This directory stores all the necessary files and data for booting the system, including the bootloader (most likely GRUB if you are running Xubuntu and stored in /boot/grub) and parts of (if not all) of the kernel (depending on your distribution).   dev The Linux file system is very different from the windows file system in that everything is treated as a file, including devices (such as serial devices, partitions etc).   home The location of your user directory, usually /home//   lib* Various library folders   \u0026hellip; and so on     There are a bunch of directories there, but we will come back to them later. Lets keep moving!\n Ok, back on track. So lets take a look at the pinnacle of interfaces, the command line. Navigate whichever menu you have and open up a terminal.\n You should see something like this: Time for some hacker shit. Lets try a few commands:\n   Command Effect Example     ls list contents of current directory (or directory if specified) ls lah   cd change directory (if called with no args, will send you to home) cd /etc   pwd shows the present working directory pwd   lsusb show currently connected USB devices and their IDs lsusb -v   vim a handy dandy text editor in the terminal. vim newfile.txt    Ok Neo, once you have played around with the terminal for a bit, we are now ready to set up our system.\nLets update our apt package lists - in your terminal type the following:\nsudo apt update  Command breakdown: sudo: this tells the OS that you wish to execute the following instructions as \u0026ldquo;admin\u0026rdquo;. it is short for \u0026ldquo;super-user-do\u0026rdquo; (pronounce soo-dough) apt: (short for aptitude) \u0026hellip; a package managing program.. oh god, I need to explain that too update: argument to apt that instructs it to update its packages.\n ELI5: Packages? what?\nOk, so another core difference between Windows and Linux is that the various Linux (distributions - \u0026ldquo;distros\u0026rdquo;, such as ubuntu, Debian, Arch etc) maintain a set of packages that are available as part of their \u0026ldquo;Package Manager\u0026rdquo; system. Anyone who has used python\u0026rsquo;s pip before will be familiar with this, but basically a package is a set of libraries or programs that do a certain thing.\nIn Windows, if you want to install a program, you usually google the name of the program and try and find the appropriate installer (like python, for example). You get the .exe, run it, install the program into who knows where in your directory structure, and then when you want to run it, you go and find the exe and double click it.\nLinux distros (like Ubuntu) tend to be a bit more organised. As I mentioned, you have these package lists that are maintained officially, and when you want to download something, like python, you simple ask the package manager to get the package and install it (like pip..ish):\nsudo apt install gcc\r The caveat here is that if you have older package lists, you might download something that is out of date. Also, not everything is stored in the \u0026ldquo;official packages\u0026rdquo;. Finally, while the system does attempt to make sure things are compatible, you can definitely force the system to do the wrong thing. (Uncommon through normal use, typically the package manager will warn you that something is wrong).\nOnce the package is installed, the relevant files will be placed in a sane location on your system. That\u0026rsquo;s right, unlike Windows where you have things install where ever they please, Linux tends to try and keep all your binaries, libraries etc in the same place (typically the root directory, /bin, /sbin, /opt etc depending on what type of package you have installed).\nMore on this later\u0026hellip;\n  Ok, lets run:\nsudo apt update\r and you should see something like this:\n You can see that we have updated our package lists and that there are several that we can update\u0026hellip; lets go ahead and upgrade them:\nsudo apt upgrade\r  Type \u0026ldquo;Y\u0026rdquo;, hit enter and let it do its thing. Depending on how many packages are able to be updated, this could take a minute or two, but you should see feedback on the\nFinally, before we install ROS2, lets install some other nice to have packages and programs:\nLets install some other packages that we will need (we can install other things at this point, but for example):\nsudo apt install git vim suckless-tools\r Suckless-tools is neat. Once it is installed, go to your keyboard settings in the control panel:\n Click Add:\n Add dmenu_run as the command:\n and press alt + p when prompted to enter a keyboard command, you should see this:\n Now if you press Alt + P, you should see at the top of your screen: If you type some letters, you should be able to see application names popping up. Basically this just lets you run programs really quickly and easily without needing to even touch your mouse!\nLets also install MS Code so you can see how that works. Open your mouse menu and click web browser (by default Firefox) Google for MS code and you should get here: Click that and select \u0026ldquo;Save File\u0026rdquo;: It will be placed in your Downloads folder, cd there and ls the contents of your directory: Now lets install it from the command line (try using tab-complete for this - type \u0026ldquo;cod\u0026rdquo; and hit tab, the shell should autocomplete the name for you):\nsudo dpkg -i code_1.59.1-1629375198_amd64.deb\r This is a .deb (debian) file, which is a type of package file for Debian based Linux distros. Ok, theres a lot going on in that sentence, but basically it is a file that contains package information and data (like we talked about before).\nIn this line, we are instructing dpkg (a package management system for ubuntu, works alongside apt) to install (-i) the file we have specified:\n Ok, so now if you press Alt + P and type code, you should see code pop up in the dmenu bar. Hit enter and Code should start up.\nOk, so that is about it for linux stuff for now. Feel free to play around with the system, try out other command line things and get a feel for it. Next we install ROS2.\n Installing ROS2 Ok, so now we will install ROS2 onto our machines. If you want to skip all my waffling, you can follow the very excellent instructions here:\n ROS2 Installation\nOtherwise, in your terminal, run the following commands:\nlocale # check for UTF-8\rsudo apt update \u0026amp;\u0026amp; sudo apt install locales\rsudo locale-gen en_US en_US.UTF-8\rsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\rexport LANG=en_US.UTF-8\rlocale # verify settings\r This updates our locale, which is basically just the environment variables that tell the system which character set, language etc to use.\nsudo apt update sudo apt install curl gnupg lsb-release\rsudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\r We have already seen the update (and executed it, so we don\u0026rsquo;t really need to run it again here, but it doesn\u0026rsquo;t hurt). The next line installs a few useful packages, and the last line uses a program called curl to update our distro package list keys.\nNext we add the package repository to our lists and off we go:\necho \u0026quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main\u0026quot; | sudo tee /etc/apt/sources.list.d/ros2.list \u0026gt; /dev/null\r Then:\nsudo apt update\rsudo apt install ros-galactic-desktop\r And wait for that to finish. Once it is done, you should be able to test your install!\nFirstly, lets make our lives a little easier:\nThere is a file called setup.bash, that allows us to set a bunch of environment variables that we will want to set to be able to use ROS2. We need to set that in each terminal that we run, however, we can add it to the environment set up so that it is automatically set each time we open a new terminal.\nCopy the line: source /opt/ros/galactic/setup.bash\nAnd add it to the end of your .bashrc file, in your home directory:\n/home/$username/.bashrc\n and now, open two new terminals. (or run the source command on the above file from existing terminals).\nIn one, run:\nros2 run demo_nodes_cpp talker\r and the other run:\nros2 run demo_nodes_py listener\r You should see the following (Note the publisher on the left and the subscriber on the right):\n Congratulations, we have installed ROS2 on a new Linux machine!\n"},{"id":26,"href":"/docs/workshops/workshop_1/","title":"Workshop 1","section":"Home Page","content":"Workshop 1: Introduction to ROS Overview This workshop will introduce you to some core concepts in ROS2, show you how to track a ball with some basic computer vision (without ROS) and then finally integrate ROS into our ball tracking program as a practical way of learning how ROS works.\nYou will need:\n The computer you set up last time in workshop 0. Ideally a webcam, but we can work around that.  Link to repo: robo workshops\nTime to complete : ~1-1.5 Hours\nROS and ROS2 ROS (Robotic Operating System) is a collection of open source libraries, build systems, tools, drivers and other algorithmic packages that provide a structure for building robotics projects. (ROS and ROS2 are very similar, ROS2 just uses different technology in its network stack - we\u0026rsquo;ll talk about the differences later as they are conceptually very similar). At its core, ROS (and ROS2) is a communication framework that allows the transfer of data, control, state and all sorts of other complex information in a way that is flexible and abstracted. It can provide a structure for projects as simple as a blinking light on a micro-controller to complex industrial applications and autonomous vehicles.\nTo understand how ROS works, lets think about how we might like to build a small wheeled robot:\n On board we have a lidar, camera, IMU (Inertial Measurement Unit - we\u0026rsquo;ll get to those in a few episodes), some motor drivers and a computer to process the data, control the motors etc. How would the software architecture for such a system look? Well, we could definitely just have a big loop that spins, reading data from our sensors and processing it, something like this:\n An approach like this however does have some drawbacks:\n  Serial Execution: We execute everything serially (one after the other) only making progress once an operation has finished. For example, our IMU might be producing data at a very fast rate ( \u0026gt;100Hz), whereas we might have a very slow camera, which operates at 10Hz or less. This means that while we are waiting on the camera data, we will be missing out on new data from the other sensors in the system (lidar, IMU, etc). On top of that, we still need to process that camera data (as well as the lidar data etc!) By the time we get to the calculate_path function call, our IMU data might be very out of date, significantly reducing its usefulness.\n  Robustness (or lack thereof): Imagine if we are driving along and all of a sudden our get_lidar_data function throws an exception. How do we restart the lidar module and recover? More importantly, how can we ensure that our system is still under control? We need a way to prevent a single point of failure from knocking out the entire system (often catastrophically, especially when vehicles or other large masses are involved). Making sure that the rest of the system can respond to a failure is critical.\n  Tight Coupling: That is, some parts that are otherwise unrelated or distantly related become dependant on the specific implementation of other parts of the system. Then, changing one part of the system would necessitate changing other parts of the system. Imagine our calculate path function requires a particular format of data from our camera and lidar - what happens when we need to change our lidar to a different model, brand ? (the Baraja packet structure is very different to the Velodyne packet structure and would require effort to change)\n  (and more)\n  What we would really like to do is decentralise our system\u0026rsquo;s architecture. This means that instead of having one large monolithic program like the one above, we break our system down into smaller modules, with clearly defined roles, interfaces and abstract implementations.\nThis is where ROS comes in. If we were to implement the above system in ROS, it would look something a little more like this:\n Each of the coloured rectangles in the above network (called a graph) represents one computational module, called a node. They can produce or consume data, or both (or neither, although this isnt common). We call the data messages (kind of like a network packet) and the name of that message stream a topic. Messages are of a pre-defined type (and you can define your own). Nodes that listen for these topics are considered to be subscribers of that topic and nodes that produce data on these topics are considered to be publishers. Whew, ok, that was a lot to take in. Lets examine the IMU path in the above graph as an example.\n Starting at the left, we can see the IMU hardware and the node that manages it. This node provides the low level interfacing with the IMU device via whatever hardware interface is required and collects the raw data that it produces. It then packages that raw data up in a standard ROS message type (sensor_msgs/IMU) and publishes it on the topic \u0026ldquo;imu_data\u0026rdquo;. One of the fantastic things about the pub/sub model is that when a topic is published to, all subscribed nodes immediately receive it. The next node is the Pose Estimation node. It is a subscriber to the imu_data topic. Whenever it receives an IMU message it will use that data to calculate the pose estimation of the robot, which it then packages up into a standard message format of the type geometry_msgs/Pose and publishes it on the \u0026ldquo;imu_pose\u0026rdquo; topic. Finally, on the right, our Navigation node is subscribed to the \u0026ldquo;imu_pose\u0026rdquo; topic, which it then uses with data from other topics from the lidar, camera and whatever else, which it then turns into control signals for the motor driver (which would also be a node in our system - it is nodes all the way down).\nThis approach may look a lot more complicated at first glance, but it conveys significant advantage over the monolithic approach that we considered above. Lets take a look at our list of drawbacks with the monolithic design:   Serial execution: Since our system is decentralised, each node is processing separately and asynchronously with respect to every other node in the system. What that means is that these nodes are all effectively running \u0026ldquo;at the same time\u0026rdquo;* and so there is no risk of one node delaying other nodes from doing work.   System robustness: Since our system is decentralised, we have significantly reduced the risk of a single point of failure from knocking out the entire system**. In this revised model, if a node fails and cannot recover, we can detect that, attempt to restart the node and in the worst case scenario, the navigation node would detect that the lidar node is not publishing data and cease operation, making our system far more robust to failure and far safer.   Coupling is no longer a significant issue - since our code is now both logically and implementationally separated into modules, there is far less risk that one node could depend on the specifics of another. Additionally, since we are now communicating with topics and standard message types, we can replace any node with another, as long as it conforms to the same standard (produces the same message type). Say we replace the Velodyne lidar on our system with a Baraja lidar, the only change we would need to make is to replace the lidar node itself, as everything downstream would just be expecting the standard point cloud message type.   *: as much as any processes running on the same machine are running \u0026ldquo;at the same time\u0026rdquo;. There is some detail here, but we will gloss voer it for now (boy, I sure do do that a lot dont I\u0026hellip;) **: There are still failure modes for any robotic system that can be catastrophic (general power failure, failure of main control threads etc.) It is up to the designers to make sure the system is going to \u0026ldquo;fail safe\u0026rdquo;. Hopefully we can see how this graph and node structure and publisher/subscriber model is super useful. ROS offers a significant number of other advantages as well, but I think we have had enough theory for now.  ELI5: Abstraction and coupling\nAbstraction: In computer science, the concept of abstraction (abstract data types, abstract interfaces) describes a system where the details of its implementation are hidden from the outside. Instead, the system will expose a carefully designed interface, which provides the functionality, but protects the hidden implementation. There are many significant advantages to this design approach:\nIf the implementation details are hidden, then they cannot change the way the user interacts with the system. Therefore, they can also be changed without impacting the users interaction experience. As a designer, you could update the inner workings of the system to make it faster or more efficient, fix bugs etc. and the user would never need to know.\nIf the user cannot access the implementation, the user is also unable to break it (more). Protecting the implementation from outside interference is a critical part of abstraction (like say, a customer being able to see how an ATM worked).\nIf the abstract interface provided is common enough (or specified by some governing body, like say JEDEC, ISO etc), then swapping out one implementation for another is trivially simple. As an example, consider the humble USB stick. How do they work? No-body knows. You just plug it into your USB port and your computer recognises it (ideally) and off you go. As a user, you have no opportunity to break the system, since it is all hidden away from you. If the company that makes the USBs finds an even more efficient way to make them, or make them faster or larger or whatever, you as the user don\u0026rsquo;t need to know about it. You just plug it in and off you go - no manual intervention required, even if the underlying design is completely different (say they change from flash memory to anther type of storage). Finally, if your USB stick stops working, it doesn\u0026rsquo;t matter! Just grab another one and it is guaranteed to work in all your existing USB ports.\nCoupling: Coupling is almost the complete opposite of abstraction. Instead of clean abstract interfaces defining the interaction of different modules, a highly (or tightly) coupled system will be all disgustingly intermingled, with all sorts of way-too-close for comfort interaction going on. More formally, the higher the coupling of a system, the higher the dependence between its modules. Typically highly-coupled systems are harder to maintain and modify, since a change in one part of the system would necessitate changes in other parts (and in areas that may not necessarily be clear to the engineer), as a result of difficult maintenance and modificability(?), highly coupled systems are far likelier to contain bugs an errors.\nCoupling may not necessarily be a bad thing however - loosely coupled systems tend to be easier to maintain, but data flow and coordination can be trickier or less efficient. Like most things, there is a compromise to be found and it is up to the designer to use their best judgement.\n  Ball Tracker Ok, thats enough theory for now, lets take a break from ROS and do something interesting! We will write a simple Python program that uses some computer vision basics to track a red ball in an image or video stream. We won\u0026rsquo;t be using any ROS in this program\u0026hellip; for now.\nThe code for this is exercise is available at the repo link in the overview at the top of the page. If you want to jump ahead, you can run the program like so:\n# change directory into the folder containing our program\rcd robo_workshops/workshop_1/ball_tracker # change the permissions of the python file to executable (means we can run the file directly)\rchmod 755 ball_tracker.py # run the program, passing in an image path as an argument ./ball_tracker.py --img_path data/ball_0.png\r# Alternately, run the program with no argument to use input from a camera:\r./ball_tracker.py\r Before we begin, lets get our Linux machine ready for our ball tracker by installing some needed packages:\nsudo apt install python3-pip v4l-utils  Then to install some required python packages (these are also listed in the requirements.txt file in the repo):\npip install opencv-python imutils\r Ok, so lets get started. I have this red ball on my desk, but its always rolling around and getting in the way. Lets write a program that lets us track where it is to make sure we can keep it out of trouble.\nWe\u0026rsquo;ll set up our program to either take in a path to an image file, or (the default) use a camera stream as its image source. We will then take a frame from our camera stream (or our image file), apply some processing to it and then display the result on screen. Lets take a look at our main function:\n \u0026hellip;\n Ok, so we have some boilerplate for argument parsing, and then our main function. If we haven\u0026rsquo;t been provided an image file path by the user (line 28), we open a video stream object on our camera device. OpenCV allows you to specify a video device index, which roughly corresponds to your video device enumeration in /dev. By default we will use device 0, the first device, but we allow the user to specify with the video_device argument.\nIf we are using the webcam, we then attempt to read from it (which is the most elegant way I could find) to make sure the device is working as expected. If not, we report the error to the user and exit the program.\nNext, we have our main loop - if we have been provided an image path by the user, we read that path to obtain our frame, otherwise, we read a frame from the camera. Either way, we now have a matrix representing the image data, where the first two dimensions are the same dimensions as the resolution of the camera/image, and the last dimension stores the colour information of the corresponding pixel (in BGR format, which is the openCV default).\nActually, while we are here, lets take a bit of a look at how image data is stored in a matrix. It\u0026rsquo;s mostly pretty intuitive:\n You can imagine the image to be a large grid, where the horizontal axis is the x axis, and the vertical axis is the y axis, then the top left is position x = 0, y= 0 or (0, 0) and the bottom right is (i, j) where i is the maximum width of the image and j is the maximum height of the image. You can see in the above image how as we zoom closer in to the image, these individual grid squares become more and more apparent. We call these \u0026ldquo;pixels\u0026rdquo; and each one is represented by three numbers 9for colour images, otherwise it is just one), each with a value from 0 to 255 and corresponding to blue, green or red. These colours, when blended, allow us to represent any colours in the spectrum, which is super neat.\nSide note, if you look at your phone screen under a microscope, you may be able to see the blue green and red pixels, which when viewed far enough away, combine to have the same effect.\nOk, so the computationally oriented among you might be thinking \u0026ldquo;0-255\u0026hellip; thats one byte!\u0026rdquo; and that is correct - one pixel can be stored as one byte for monochromatic images (single hue images) and three bytes for colour images. Therefore, a colour image that is uncompressed requires at least i* j * 1 bytes for monochromatic images, or i * j * 3 for colour images bytes to be stored. (typically though the image is compressed which reduces the size, and will have some sort of metadata header, which slightly increases size.\nAnyway, lets get back to the ball. Here is the culprit:\n We want to be able to extract its location in the image frame. If we look back at our main function, there is a call to a function called process_frame. This function does all of the image processing for our program. The plan will be the following:\n Pre-process our frame, apply a slight blur and covert it to the HSV colour space Generate a binary mask of the red regions of the image (to track our red ball) Select the most appropriate contours from our mask Use these contours to select the ball and mark it  Lets take a look at the process_frame function: The first thing we do is prepare the image. Here we apply a Gaussian blur, which is a form of low-pass filter. By applying a blur like this, we are reducing noise and detail (high frequency information) in our image which might make our colour based detection less effective. We don\u0026rsquo;t want to reduce our detail too much, so we keep the blurring to a minimum. Here is our blurred ball:\n Next, we will convert the image into the HSV colour model. HSV (Hue, Saturation, Value) is a model that represents colours differently from the RGB model. RGB allows the combination of red, green and blue values to represent any colour in the spectrum. In HSV, we instead represent the hue, saturation and value of an image. The advantage of this approach is that we can separate the intensity and colour information. In computer vision applications, this translates to greater robustness to changing lighting conditions.\nFor example, a red object will always be red in the HSV colour model, but with varying saturation and value \u0026hellip; values. You can see this in the cylindrical representation of the HSV model below. Notice that colours are represented as an \u0026ldquo;angle\u0026rdquo; on the face of the cylinder, with 0 degrees being in the lower red range, and 359 being in the higher red range (0 degrees is the red primary, 120 degrees is the green primary and 240 degrees is the blue primary).\n Converting our image matrix into the HSV colour model gives us this:\n Quite a bit different!\nWe have now completed our image pre-processing. Lets create a binary mask of the red regions of the image. A binary mask is basically just a matrix where the value in the element is either 1 if teh element belongs to the set, or 0 if it doesn\u0026rsquo;t. We will be using HSV values as our bounds for creating the mask. All we are really doing is looking at whether or not each pixel in the image is red \u0026ldquo;enough\u0026rdquo; by determining if it is inside of some threshholds that I have calculated beforehand.\n \u0026hellip; In the top picture, I have created some mask bounds (in HSV) for red. Remember how I mentioned that in HSV, the red primary sits around 0 degrees? well, if we want to capture red reliably, we will need two masks which will cover the red region from H values 0 through 15, and the red region from about 165 through 179. (In openCV, H values in HSV are between 0 and 179 and S and V values are between 0 and 255). We will then add these two masks together to get a full red mask. Here\u0026rsquo;s what that mask looks like:\n We pick up the ball as well as the red keycap on the keyboard in the background. So far so good. Our mask is looking pretty good, but lets go ahead and apply some morphological operations to it. These are a type of non-linear filter, where a pixel is changed based on the characteristics of the neighbouring pixels.\nIt helps to think about our mask as a binary matrix, where the black regions are 0\u0026rsquo;s and the white regions are 1\u0026rsquo;s, and when we apply a morphological operation to our image we are actually convolving a smaller kernel against our matrix. This smaller kernel is called the \u0026ldquo;structuring element\u0026rdquo; and can have different properties depending on what the intended use is.\n Think of convolution as simply sliding our structuring element (kernel) over the larger image, 9 squares at a time and applying some operation. In the case of these morph. operations, we are comparing the underlying pixel values with our kernel. If we have all pixel values under the kernel matching, it is called a \u0026ldquo;fit\u0026rdquo;, otherwise, if they do no match, it is called a \u0026ldquo;hit\u0026rdquo;. This will make more sense in a second.\nPractically, erosion and dilation are operations that are usually combined to achieve a specific effect. Applying erosion and then dilation is called \u0026ldquo;opening\u0026rdquo; and would help with things like noise or filling in any spotty areas in our ball region that might result from poor thresholding. Lets see how it works:\nErosion is kind of what it sounds like - we take an image and run our operation over it and any areas that are non-zero will \u0026ldquo;thin\u0026rdquo;. This works by applying our structuring element to our image, and any \u0026ldquo;fit\u0026rdquo; for pixel p will result in p being set to 1, otherwise, it will set p to 0. We are basically saying, if we detect even a single 0 anywhere in our little 9 square grid, i am setting the middle pixel to 0. Depending on our structuring element size and shape, we could potentially remove quite a lot of detail from our mask.\nThis can be really useful for getting rid of noise or otherwise reducing small details:\n Notice in this image that the small noisy points disappear, but our character also shrinks in size.\nNext we have dilation, which is more or less the opposite of erosion. When we run our operation on our image, any non-zero areas will \u0026ldquo;thicken\u0026rdquo;. As we run our structuring element over our image matrix, for any pixel p, any \u0026ldquo;hit\u0026rdquo; on its neighbours will result in p being set to 1, otherwise it is set to 0. So we are basically saying, if we detect any pixel in our 9 square grid that is a 1, set the middle pixel to 1 as well.\nThis can be great for filling up regions that have inclusions or otherwise increasing the size of smaller details:\n Notice that the small inclusions in the character disappear, but the character has also gotten thicker.\nSo this is great for getting rid of small noise particles, but it does change our underlying data (which may or may not be important). So we can actually combine these two operations (erode -\u0026gt; dialate) and perform what we call \u0026ldquo;opening\u0026rdquo; the image.\nOur mask was already pretty good, so the effect isn\u0026rsquo;t very dramatic:\n Eroded on the left, dilated on the right. We can see that we did introduce a small inclusion in our erosion, and that the dilation shrinks it again. We could play with our morphological parameters to get different results if we needed to.\nOur mask is looking pretty good now! Lets go ahead and extract the ball location from it. We can do this by extracting all of the contours from the image (luckily openCV can do this for us):\n Contour detection and extraction is actually super interesting (but a little out of the scope of this workshop). The implementation that openCV uses is based on a paper that is unfortunately behind a paywall: Topological structural analysis of digitized binary images by border following - Satoshi Suzuki, Keiichi Abe (written back in 1985!!)\nWe can now finally extract the probable ball location from our contour list:\n There are a few things going on here, lets break it down: First we check to make sure that we actually found a contour in our image (based on the mask above, I would expect two contours. We want to select the contour with the largest area (although, this may not be the best approach \u0026hellip;) and then find the circle that encloses it. The choice of circle is more or less arbitrary, it could be a bounding box or whatever else we want.\nWe then calculate the moments of the contour and calculate the center moment. A moment is kind of like a moment from physics - pixels in an image are weighted by their intensity. This allows us to find center of \u0026ldquo;mass\u0026rdquo; and other things that are useful for describing objects in an image. We don\u0026rsquo;t need to worry about this too much at the moment though. The raw/image moments page on Wikipedia has a good overview.\nOur function returns the x, y, and radius of our ball, as well as its center (if it is large enough). We then jump back to our process image function to draw our enclosing circle:\n And there we have it, we have detected a ball:\n Remember, you can run the program like so: # change directory into the folder containing our program cd robo_workshops/workshop_1/ball_tracker\n# change the permissions of the python file to executable (means we can run the file directly)\rchmod 755 ball_tracker.py # run the program, passing in an image path as an argument ./ball_tracker.py --img_path data/ball_0.png\r# Alternately, run the program with no argument to use input from a camera:\r./ball_tracker.py\r  ROS-ifying our Ball Tracker and Running our First Nodes Ok, so the last thing we will look at in this workshop is applying some of the things that we learned about ROS2 to our little ball tracker program.\nBefore we begin, lets install some necessary packages:\nsudo apt install ros-galactic-usb-cam ros-galactic-rqt*\r Ok, so to recap the last section, we created a small python program that would track a red ball - we read frames directly from our camera, processed them to identify the ball, and then viewed them until the user quit the program. Now we are going to change that structure up a bit, to see how ROS works and how easy it is to use.\nFirst, lets spin up our ROS linux machine, plug in a USB camera and try a few things out. Open up a terminal and run:\nros2 run rviz2 rviz2\r Note: if you get an error here about the system not knowing what ros2 is, make sure you have added the line\n\u0026quot;source /opt/ros/galactic/setup.bash\u0026quot;\r (without quotes) to the end of your .bashrc file in your home directory (/home/\u0026lt;username\u0026gt;/.bashrc). It was one of the last things we did in the last workshop, but it is easy to forget.\nIn the line that we ran above, \u0026ldquo;ros2 run\u0026rdquo; allows us to run applications that exist in the ROS2 environment. \u0026ldquo;rviz2\u0026rdquo; (the first one) is the package name space for rviz, the ROS Visualiser. The last \u0026ldquo;rviz2\u0026rdquo; is the name of the app. Its a bit confusing, but what are you going to do about it?\nIf we run the above line, we should see something like this pop up, which might be a little familiar:\n This is the Rviz interface, where we can visualise data that we have subscribed to. It is also a node, which we will see in a moment. Lets get some data going. In a different terminal run the following:\nros2 run usb_cam usb_cam_node_exe\nThis line is pretty similar to the rviz line above, except we are using a different package - the usb_cam package we installed just before. We are also running the ridiculously named \u0026ldquo;usb_cam_node_exe\u0026rdquo; binary. If all goes well, your terminal should spit out something like the following:\n Ignore the error, it just means that we haven\u0026rsquo;t set up a calibration file for this camera. If you get any other errors, like this one:\n \u0026hellip; just make sure your camera is plugged in and the virtual machine (if you are using one) has access to the camera. You can try unplugging and plugging it back in to correct this.\nOk, aside from that, nothing has happened, but we have just started another node, the usb_cam node. Lets have a look at the data in rviz:\nIn the bottom left of the rviz window, you should see an \u0026ldquo;Add\u0026rdquo; button. Click this and then click the topics tab in the window that pops up and finally double click on the \u0026ldquo;Image\u0026rdquo; option.\n If all goes well, you should see this somewhere in the bottom left:\n Ok, one last thing, lets make sure that our frame of reference in the visualiser is correct. To do this, we need to see what the camera\u0026rsquo;s frame of reference is - in a terminal, run the following:\nros2 node list\r  Note that we can see our rviz and usb_cam nodes - great!\nLets have a look at the topics we are currently publishing, while we are at it:\nros2 topic list\r  ok, lets take a closer look at our usb_cam node now:\nros2 node info /usb_cam\r  In the above, we can see the subscriptions and published topics of our node, as well as a bunch of other stuff. Ignore that for now.\nfinally, lets have a look at the start of one of our /image_raw topic:\nros2 topic echo /image_raw | head -n 20\r This line will echo the topic /image_raw and then \u0026ldquo;pipe\u0026rdquo; it into a linux tool called \u0026ldquo;head\u0026rdquo;, which allows us to output the first n (default 10) lines of a file. We should see:\n Here we can see our message header, which contains metadata like the timestamp (epoch time), the size of the image (640x480 pixels in this case) the colour encoding, etc. We are interested in the frame_id, since we will need to set this in rviz. Because we have not set it, it is just \u0026ldquo;default_cam\u0026rdquo;.\nI will go into frames of reference and transforms in a future workshop, but I don\u0026rsquo;t want to overwhelm you!\nLets go back to rviz and set our Fixed Frame - click on the fixed frame field that will say something like \u0026ldquo;map\u0026rdquo; and type in \u0026ldquo;default_cam\u0026rdquo;:\n And viola! We should now see camera data coming through in our rviz image window in the bottom left: We should see camera output in the bottom left, although it may be a bit laggy if you are running on a virtual machine. Great stuff!\nOne last thing before we move onto the python, lets take a look at the node graph that we have created:\nrqt_graph\r You should see something like this pop up:  This is great - this is our node graph. We can see on the left we have a node called \u0026ldquo;/usb_cam\u0026rdquo; (in blue) publishing a topic called \u0026ldquo;/image_raw\u0026rdquo; ()in red) and on the right, we can see rviz (in green) subscribing to it (which is what we set up when we clicked the \u0026ldquo;Add\u0026rdquo; button). Fantastic!\n Publishifying and Subscribifying our Ball Tracker Ok, sorry about that tangent. Lets get back to business.\nRemember how at the beginning of this workshop (bet it feels like hours ago now) I showed you that monolithic program structure for our robot, where we just had a big loop, grabbed some data, processed it and then did something with it? Well, that kind of looks like the way that I have written the python program. Lets have a look at how we can make it a little more ROS compatible.\nHere is the basic overview of our system currently: We really want to turn it into something more like this: Its not really that hard - we are simply going to create a node called \u0026ldquo;ball_tracker\u0026rdquo; which will subscribe to the image topic produced by the /usb_cam node and publish its own topic with the circled ball image. Lets do it!\nLets begin by creating a workspace: (As always, this is included in the repo code, but it would be good for you to practice creating a workspace anyway)\ncd \u0026lt;location of where you want to work\u0026gt;\rmkdir -p ball_tracker_ws/src\rcd ball_tracker_ws/src\rros2 pkg create --build-type ament_python py_ball_tracker\r Note - you might get a message about rosdep not being installed, if that is the case, run:\nsudo apt install python3-rosdep\rsudo rosdep init\rrosdep update\r Now you should have a workspace and a package called py_ball_tracker set up. We are going to go into the /ball_detect_ws/src/py_ball_tracker/py_ball_tracker/ directory and create a file called BallTracker.py\nBefore we dive into the code, lets talk about how this is going to work. Remember that we want to be able to respond to any message that we are subscribed to as soon as it comes in. Rather than have a large polling loop (which is what the monolithic design was doing), we will use something called a \u0026ldquo;callback\u0026rdquo; function. This is just a software nerd way of saying \u0026ldquo;a function that gets called when something specific happens\u0026rdquo;.\nWhat we will do is create a callback function that will respond to any image messages that we receive. This callback function will do some work on the image (which we have already set up in our ball_tracker python program) and then publish the new image to a different topic. We will then subscribe to that topic in rviz and view it.\nOk, lets do it. We will be writing this node as a python class. If that sentence doesn\u0026rsquo;t mean anything to you, then don\u0026rsquo;t stress. I have a 17 part lecture series on how to write a python class\u0026hellip; :P\nFor the most part, I have left the code in its original format - we will be using the same functions, just incorporated into a class. We can focus then on the interface. Lets take a look at our program now:\nFirst, lets look at our class structure: \u0026hellip; We have created a class called \u0026ldquo;BallTracker\u0026rdquo;, which inherits from the Node object (this is a ROS Node object, providing a bunch of functionality like subscribe and publish).\nWe have also added some basic objects:\n self.image_subscription: a subscriber object, which will listen on the /image_raw topic  Notice that we have given the image_subscription object a reference to something called self.process_image_callback - this is our callback function that will be called every time an image message is received on the /image_raw topic.   self.image_publisher: a publisher topic which will publish to the /ball_detect_out topic self.cv_bridge: a bridging function that allows us easy conversion between ROS and OpenCV objects.  Ok, so that is the class stuff out of the way, lets take a look at the callback function: When an image message is received on the topic specified at subscriber creation (\u0026quot;/image_raw\u0026quot;) this function will be called with the message passed in as an argument (\u0026quot;in_msg\u0026quot;).\nOn line 51 we convert it from an image message to an image matrix (that we have seen before in our other implementation). On line 55, we are simply calling our process frame function to process the frame and return the resultant frame. Lines 59-60 show us creating an image message object and setting its \u0026ldquo;frame_id\u0026rdquo; value to match that of our usb_cam node. Finally, line 63 shows us publishing the message.\nTo make it super clear how this related back to our non-ROS ball tracker, lets look at the functions side-by-side (figuratively): Equivalent sections have been numbered accordingly (1 == 1, 2== 2 etc). Look at that, they are basically identical! See, ROS isn\u0026rsquo;t so scary. Lets check RVIZ to make sure we are able to visualise our data:\n Perfect! We can see that we are publishing an image stream on the topic that we created, with the ball circled!\nLets double check that ROS graph situation: This is exactly what we wanted: we have a node that publishes a camera image (/usb_cam) to a topic (\u0026quot;/image_raw\u0026rdquo;), another node that subscribes to that topic, processes it (\u0026quot;/ball_tracker\u0026rdquo;) and publishes it to another topic (\u0026quot;/ball_detect_out\u0026rdquo;) and finally another node (\u0026ldquo;rviz\u0026rdquo;) that visualises it (but this could be any consumer node).\nOk, so if you clone the project (get the link at the overview section at the veeeeery top of the page) you will need to build the workspace:\ncd \u0026lt;repo\u0026gt;/workshop_1/ball_detect_ws\r#build our project - this may take a moment\rcolcon build --packages-select py_ball_tracker\r# source our local workspace envioronment set up\rsource install/setup.bash\r If you get an error that your system doesn\u0026rsquo;t know what colcon is, install it like so:\nsudo apt install python3-colcon-common-extensions  Then to run everything, try the following:\nros2 run rviz2 rviz2\rros2 run usb_cam usb_cam_node_exe\r \u0026hellip; and then finally run our new node:\nros2 run py_ball_tracker ball_tracker\r Ok, have fun! I recommend having a play around with the computer vision stuff - try and figure out how you can break the ball tracking (it wont be hard) and then think about how you might be able to improve it.\n"}]